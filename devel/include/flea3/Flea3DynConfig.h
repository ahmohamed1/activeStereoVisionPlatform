//#line 2 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
// 
// File autogenerated for the flea3 package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

#ifndef __flea3__FLEA3DYNCONFIG_H__
#define __flea3__FLEA3DYNCONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace flea3
{
  class Flea3DynConfigStatics;
  
  class Flea3DynConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(Flea3DynConfig &config, const Flea3DynConfig &max, const Flea3DynConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const Flea3DynConfig &config1, const Flea3DynConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, Flea3DynConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const Flea3DynConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, Flea3DynConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const Flea3DynConfig &config) const = 0;
      virtual void getValue(const Flea3DynConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, 
          std::string a_description, std::string a_edit_method, T Flea3DynConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (Flea3DynConfig::* field);

      virtual void clamp(Flea3DynConfig &config, const Flea3DynConfig &max, const Flea3DynConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const Flea3DynConfig &config1, const Flea3DynConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, Flea3DynConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const Flea3DynConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, Flea3DynConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const Flea3DynConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const Flea3DynConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, Flea3DynConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    template<class T, class PT>
    class GroupDescription : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, Flea3DynConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<Flea3DynConfig::AbstractGroupDescriptionConstPtr> groups;
    };
    
class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(Flea3DynConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("fps"==(*_i)->name){fps = boost::any_cast<double>(val);}
        if("video_mode"==(*_i)->name){video_mode = boost::any_cast<int>(val);}
        if("format7_mode"==(*_i)->name){format7_mode = boost::any_cast<int>(val);}
        if("width"==(*_i)->name){width = boost::any_cast<int>(val);}
        if("height"==(*_i)->name){height = boost::any_cast<int>(val);}
        if("pixel_format"==(*_i)->name){pixel_format = boost::any_cast<int>(val);}
        if("raw_bayer_output"==(*_i)->name){raw_bayer_output = boost::any_cast<bool>(val);}
        if("trigger_source"==(*_i)->name){trigger_source = boost::any_cast<int>(val);}
        if("trigger_polarity"==(*_i)->name){trigger_polarity = boost::any_cast<int>(val);}
        if("strobe_control"==(*_i)->name){strobe_control = boost::any_cast<int>(val);}
        if("strobe_polarity"==(*_i)->name){strobe_polarity = boost::any_cast<int>(val);}
        if("exposure"==(*_i)->name){exposure = boost::any_cast<bool>(val);}
        if("auto_exposure"==(*_i)->name){auto_exposure = boost::any_cast<bool>(val);}
        if("exposure_value"==(*_i)->name){exposure_value = boost::any_cast<double>(val);}
        if("auto_shutter"==(*_i)->name){auto_shutter = boost::any_cast<bool>(val);}
        if("shutter_ms"==(*_i)->name){shutter_ms = boost::any_cast<double>(val);}
        if("auto_gain"==(*_i)->name){auto_gain = boost::any_cast<bool>(val);}
        if("gain_db"==(*_i)->name){gain_db = boost::any_cast<double>(val);}
        if("white_balance"==(*_i)->name){white_balance = boost::any_cast<bool>(val);}
        if("auto_white_balance"==(*_i)->name){auto_white_balance = boost::any_cast<bool>(val);}
        if("wb_blue"==(*_i)->name){wb_blue = boost::any_cast<int>(val);}
        if("wb_red"==(*_i)->name){wb_red = boost::any_cast<int>(val);}
        if("brightness"==(*_i)->name){brightness = boost::any_cast<double>(val);}
        if("gamma"==(*_i)->name){gamma = boost::any_cast<double>(val);}
      }
    }

    double fps;
int video_mode;
int format7_mode;
int width;
int height;
int pixel_format;
bool raw_bayer_output;
int trigger_source;
int trigger_polarity;
int strobe_control;
int strobe_polarity;
bool exposure;
bool auto_exposure;
double exposure_value;
bool auto_shutter;
double shutter_ms;
bool auto_gain;
double gain_db;
bool white_balance;
bool auto_white_balance;
int wb_blue;
int wb_red;
double brightness;
double gamma;

    bool state;
    std::string name;

    
}groups;



//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double fps;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int video_mode;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int format7_mode;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int width;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int height;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int pixel_format;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool raw_bayer_output;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int trigger_source;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int trigger_polarity;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int strobe_control;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int strobe_polarity;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool exposure;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool auto_exposure;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double exposure_value;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool auto_shutter;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double shutter_ms;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool auto_gain;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double gain_db;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool white_balance;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool auto_white_balance;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int wb_blue;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int wb_red;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double brightness;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double gamma;
//#line 218 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("Flea3DynConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const Flea3DynConfig &__max__ = __getMax__();
      const Flea3DynConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const Flea3DynConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const Flea3DynConfig &__getDefault__();
    static const Flea3DynConfig &__getMax__();
    static const Flea3DynConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();
    
  private:
    static const Flea3DynConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void Flea3DynConfig::ParamDescription<std::string>::clamp(Flea3DynConfig &config, const Flea3DynConfig &max, const Flea3DynConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class Flea3DynConfigStatics
  {
    friend class Flea3DynConfig;
    
    Flea3DynConfigStatics()
    {
Flea3DynConfig::GroupDescription<Flea3DynConfig::DEFAULT, Flea3DynConfig> Default("Default", "", 0, 0, true, &Flea3DynConfig::groups);
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.fps = 1.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.fps = 240.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.fps = 7.5;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<double>("fps", "double", 0, "Frames per second", "", &Flea3DynConfig::fps)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<double>("fps", "double", 0, "Frames per second", "", &Flea3DynConfig::fps)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.video_mode = 4;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.video_mode = 23;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.video_mode = 23;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<int>("video_mode", "int", 0, "Video mode for camera", "{'enum_description': 'An enum to set video mode', 'enum': [{'srcline': 14, 'description': '', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'rgb_640x480'}, {'srcline': 15, 'description': '', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 5, 'ctype': 'int', 'type': 'int', 'name': 'y8_640x480'}, {'srcline': 16, 'description': '', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': 'rgb_800x600'}, {'srcline': 17, 'description': '', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 9, 'ctype': 'int', 'type': 'int', 'name': 'y8_800x600'}, {'srcline': 18, 'description': '', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 12, 'ctype': 'int', 'type': 'int', 'name': 'rgb_1024x768'}, {'srcline': 19, 'description': '', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 13, 'ctype': 'int', 'type': 'int', 'name': 'y8_1024x768'}, {'srcline': 20, 'description': '', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 16, 'ctype': 'int', 'type': 'int', 'name': 'rgb_1280x960'}, {'srcline': 21, 'description': '', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 17, 'ctype': 'int', 'type': 'int', 'name': 'y8_1280x960'}, {'srcline': 22, 'description': '', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 20, 'ctype': 'int', 'type': 'int', 'name': 'rgb_1600x1200'}, {'srcline': 23, 'description': '', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 21, 'ctype': 'int', 'type': 'int', 'name': 'y8_1600x1200'}, {'srcline': 24, 'description': '', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 23, 'ctype': 'int', 'type': 'int', 'name': 'format7'}]}", &Flea3DynConfig::video_mode)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<int>("video_mode", "int", 0, "Video mode for camera", "{'enum_description': 'An enum to set video mode', 'enum': [{'srcline': 14, 'description': '', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'rgb_640x480'}, {'srcline': 15, 'description': '', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 5, 'ctype': 'int', 'type': 'int', 'name': 'y8_640x480'}, {'srcline': 16, 'description': '', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': 'rgb_800x600'}, {'srcline': 17, 'description': '', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 9, 'ctype': 'int', 'type': 'int', 'name': 'y8_800x600'}, {'srcline': 18, 'description': '', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 12, 'ctype': 'int', 'type': 'int', 'name': 'rgb_1024x768'}, {'srcline': 19, 'description': '', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 13, 'ctype': 'int', 'type': 'int', 'name': 'y8_1024x768'}, {'srcline': 20, 'description': '', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 16, 'ctype': 'int', 'type': 'int', 'name': 'rgb_1280x960'}, {'srcline': 21, 'description': '', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 17, 'ctype': 'int', 'type': 'int', 'name': 'y8_1280x960'}, {'srcline': 22, 'description': '', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 20, 'ctype': 'int', 'type': 'int', 'name': 'rgb_1600x1200'}, {'srcline': 23, 'description': '', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 21, 'ctype': 'int', 'type': 'int', 'name': 'y8_1600x1200'}, {'srcline': 24, 'description': '', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 23, 'ctype': 'int', 'type': 'int', 'name': 'format7'}]}", &Flea3DynConfig::video_mode)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.format7_mode = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.format7_mode = 8;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.format7_mode = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<int>("format7_mode", "int", 0, "Camera modes for format 7", "", &Flea3DynConfig::format7_mode)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<int>("format7_mode", "int", 0, "Camera modes for format 7", "", &Flea3DynConfig::format7_mode)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.width = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.width = 4096;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.width = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<int>("width", "int", 0, "ROI width", "", &Flea3DynConfig::width)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<int>("width", "int", 0, "ROI width", "", &Flea3DynConfig::width)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.height = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.height = 4096;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.height = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<int>("height", "int", 0, "ROI height", "", &Flea3DynConfig::height)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<int>("height", "int", 0, "ROI height", "", &Flea3DynConfig::height)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.pixel_format = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.pixel_format = 31;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.pixel_format = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<int>("pixel_format", "int", 0, "Pixel format for format 7", "{'enum_description': 'An enum to set pixel format', 'enum': [{'srcline': 43, 'description': 'unspecified', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'unspecified'}, {'srcline': 44, 'description': 'mono8', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 31, 'ctype': 'int', 'type': 'int', 'name': 'mono8'}, {'srcline': 45, 'description': 'rgb8', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 27, 'ctype': 'int', 'type': 'int', 'name': 'rgb8'}, {'srcline': 46, 'description': 'mono16', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 26, 'ctype': 'int', 'type': 'int', 'name': 'mono16'}, {'srcline': 47, 'description': 'raw8', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 22, 'ctype': 'int', 'type': 'int', 'name': 'raw8'}, {'srcline': 48, 'description': 'raw16', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 21, 'ctype': 'int', 'type': 'int', 'name': 'raw16'}]}", &Flea3DynConfig::pixel_format)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<int>("pixel_format", "int", 0, "Pixel format for format 7", "{'enum_description': 'An enum to set pixel format', 'enum': [{'srcline': 43, 'description': 'unspecified', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'unspecified'}, {'srcline': 44, 'description': 'mono8', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 31, 'ctype': 'int', 'type': 'int', 'name': 'mono8'}, {'srcline': 45, 'description': 'rgb8', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 27, 'ctype': 'int', 'type': 'int', 'name': 'rgb8'}, {'srcline': 46, 'description': 'mono16', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 26, 'ctype': 'int', 'type': 'int', 'name': 'mono16'}, {'srcline': 47, 'description': 'raw8', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 22, 'ctype': 'int', 'type': 'int', 'name': 'raw8'}, {'srcline': 48, 'description': 'raw16', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 21, 'ctype': 'int', 'type': 'int', 'name': 'raw16'}]}", &Flea3DynConfig::pixel_format)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.raw_bayer_output = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.raw_bayer_output = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.raw_bayer_output = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<bool>("raw_bayer_output", "bool", 0, "Enable raw bayer output in standard video mode Y8 and Y16", "", &Flea3DynConfig::raw_bayer_output)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<bool>("raw_bayer_output", "bool", 0, "Enable raw bayer output in standard video mode Y8 and Y16", "", &Flea3DynConfig::raw_bayer_output)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.trigger_source = -1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.trigger_source = 7;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.trigger_source = -1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<int>("trigger_source", "int", 0, "Specifies the trigger source", "{'enum_description': 'Defines valid trigger source', 'enum': [{'srcline': 59, 'description': 'off', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': -1, 'ctype': 'int', 'type': 'int', 'name': 'ts_off'}, {'srcline': 60, 'description': 'GPIO0', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'ts_gpio_0'}, {'srcline': 61, 'description': 'GPIO2', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'ts_gpio_2'}, {'srcline': 62, 'description': 'GPIO3', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'ts_gpio_3'}, {'srcline': 63, 'description': 'software', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 7, 'ctype': 'int', 'type': 'int', 'name': 'ts_sw'}]}", &Flea3DynConfig::trigger_source)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<int>("trigger_source", "int", 0, "Specifies the trigger source", "{'enum_description': 'Defines valid trigger source', 'enum': [{'srcline': 59, 'description': 'off', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': -1, 'ctype': 'int', 'type': 'int', 'name': 'ts_off'}, {'srcline': 60, 'description': 'GPIO0', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'ts_gpio_0'}, {'srcline': 61, 'description': 'GPIO2', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'ts_gpio_2'}, {'srcline': 62, 'description': 'GPIO3', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'ts_gpio_3'}, {'srcline': 63, 'description': 'software', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 7, 'ctype': 'int', 'type': 'int', 'name': 'ts_sw'}]}", &Flea3DynConfig::trigger_source)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.trigger_polarity = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.trigger_polarity = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.trigger_polarity = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<int>("trigger_polarity", "int", 0, "Trigger polarity", "{'enum_description': 'Trigger polarity', 'enum': [{'srcline': 68, 'description': 'low', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'ts_low'}, {'srcline': 69, 'description': 'high', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'ts_high'}]}", &Flea3DynConfig::trigger_polarity)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<int>("trigger_polarity", "int", 0, "Trigger polarity", "{'enum_description': 'Trigger polarity', 'enum': [{'srcline': 68, 'description': 'low', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'ts_low'}, {'srcline': 69, 'description': 'high', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'ts_high'}]}", &Flea3DynConfig::trigger_polarity)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.strobe_control = -1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.strobe_control = 3;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.strobe_control = -1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<int>("strobe_control", "int", 0, "Specifies the stroble control", "{'enum_description': 'Define valid strobe control', 'enum': [{'srcline': 76, 'description': 'off', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': -1, 'ctype': 'int', 'type': 'int', 'name': 'sc_off'}, {'srcline': 77, 'description': 'GPIO1', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'sc_gpio_1'}, {'srcline': 78, 'description': 'GPIO2', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'sc_gpio_2'}, {'srcline': 79, 'description': 'GPIO3', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'sc_gpio_3'}]}", &Flea3DynConfig::strobe_control)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<int>("strobe_control", "int", 0, "Specifies the stroble control", "{'enum_description': 'Define valid strobe control', 'enum': [{'srcline': 76, 'description': 'off', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': -1, 'ctype': 'int', 'type': 'int', 'name': 'sc_off'}, {'srcline': 77, 'description': 'GPIO1', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'sc_gpio_1'}, {'srcline': 78, 'description': 'GPIO2', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'sc_gpio_2'}, {'srcline': 79, 'description': 'GPIO3', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'sc_gpio_3'}]}", &Flea3DynConfig::strobe_control)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.strobe_polarity = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.strobe_polarity = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.strobe_polarity = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<int>("strobe_polarity", "int", 0, "Strobe polarity", "{'enum_description': 'Strobe polarity', 'enum': [{'srcline': 84, 'description': 'low', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'sc_low'}, {'srcline': 85, 'description': 'high', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'sc_high'}]}", &Flea3DynConfig::strobe_polarity)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<int>("strobe_polarity", "int", 0, "Strobe polarity", "{'enum_description': 'Strobe polarity', 'enum': [{'srcline': 84, 'description': 'low', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'sc_low'}, {'srcline': 85, 'description': 'high', 'srcfile': '/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'sc_high'}]}", &Flea3DynConfig::strobe_polarity)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<bool>("exposure", "bool", 0, "Enable/disable exposure", "", &Flea3DynConfig::exposure)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<bool>("exposure", "bool", 0, "Enable/disable exposure", "", &Flea3DynConfig::exposure)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.auto_exposure = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.auto_exposure = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.auto_exposure = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<bool>("auto_exposure", "bool", 0, "Automatically change exposure (Gain, IRis & Shutter control)", "", &Flea3DynConfig::auto_exposure)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<bool>("auto_exposure", "bool", 0, "Automatically change exposure (Gain, IRis & Shutter control)", "", &Flea3DynConfig::auto_exposure)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure_value = -10.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure_value = 10.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure_value = 1.35;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<double>("exposure_value", "double", 0, "Auto exposure value", "", &Flea3DynConfig::exposure_value)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<double>("exposure_value", "double", 0, "Auto exposure value", "", &Flea3DynConfig::exposure_value)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.auto_shutter = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.auto_shutter = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.auto_shutter = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<bool>("auto_shutter", "bool", 0, "Auomatically change shutter speed", "", &Flea3DynConfig::auto_shutter)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<bool>("auto_shutter", "bool", 0, "Auomatically change shutter speed", "", &Flea3DynConfig::auto_shutter)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.shutter_ms = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.shutter_ms = 100.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.shutter_ms = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<double>("shutter_ms", "double", 0, "Amount of time (in milliseconds) for the apeture to remain open", "", &Flea3DynConfig::shutter_ms)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<double>("shutter_ms", "double", 0, "Amount of time (in milliseconds) for the apeture to remain open", "", &Flea3DynConfig::shutter_ms)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.auto_gain = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.auto_gain = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.auto_gain = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<bool>("auto_gain", "bool", 0, "Automatically change gain", "", &Flea3DynConfig::auto_gain)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<bool>("auto_gain", "bool", 0, "Automatically change gain", "", &Flea3DynConfig::auto_gain)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.gain_db = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.gain_db = 30.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.gain_db = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<double>("gain_db", "double", 0, "Relative circuit gain", "", &Flea3DynConfig::gain_db)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<double>("gain_db", "double", 0, "Relative circuit gain", "", &Flea3DynConfig::gain_db)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.white_balance = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.white_balance = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.white_balance = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<bool>("white_balance", "bool", 0, "Enable/disable white balance", "", &Flea3DynConfig::white_balance)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<bool>("white_balance", "bool", 0, "Enable/disable white balance", "", &Flea3DynConfig::white_balance)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.auto_white_balance = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.auto_white_balance = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.auto_white_balance = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<bool>("auto_white_balance", "bool", 0, "Automatically change white balance", "", &Flea3DynConfig::auto_white_balance)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<bool>("auto_white_balance", "bool", 0, "Automatically change white balance", "", &Flea3DynConfig::auto_white_balance)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.wb_blue = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.wb_blue = 1023;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.wb_blue = 800;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<int>("wb_blue", "int", 0, "White balance blue component", "", &Flea3DynConfig::wb_blue)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<int>("wb_blue", "int", 0, "White balance blue component", "", &Flea3DynConfig::wb_blue)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.wb_red = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.wb_red = 1023;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.wb_red = 550;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<int>("wb_red", "int", 0, "White balance red component", "", &Flea3DynConfig::wb_red)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<int>("wb_red", "int", 0, "White balance red component", "", &Flea3DynConfig::wb_red)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.brightness = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.brightness = 10.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.brightness = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<double>("brightness", "double", 0, "Black level offset", "", &Flea3DynConfig::brightness)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<double>("brightness", "double", 0, "Black level offset", "", &Flea3DynConfig::brightness)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.gamma = 0.5;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.gamma = 4.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.gamma = 1.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<double>("gamma", "double", 0, "Gamma expansion exponent", "", &Flea3DynConfig::gamma)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Flea3DynConfig::AbstractParamDescriptionConstPtr(new Flea3DynConfig::ParamDescription<double>("gamma", "double", 0, "Gamma expansion exponent", "", &Flea3DynConfig::gamma)));
//#line 246 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(Flea3DynConfig::AbstractGroupDescriptionConstPtr(new Flea3DynConfig::GroupDescription<Flea3DynConfig::DEFAULT, Flea3DynConfig>(Default)));
//#line 356 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<Flea3DynConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__); 
    }
    std::vector<Flea3DynConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<Flea3DynConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    Flea3DynConfig __max__;
    Flea3DynConfig __min__;
    Flea3DynConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const Flea3DynConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static Flea3DynConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &Flea3DynConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const Flea3DynConfig &Flea3DynConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const Flea3DynConfig &Flea3DynConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const Flea3DynConfig &Flea3DynConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<Flea3DynConfig::AbstractParamDescriptionConstPtr> &Flea3DynConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<Flea3DynConfig::AbstractGroupDescriptionConstPtr> &Flea3DynConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const Flea3DynConfigStatics *Flea3DynConfig::__get_statics__()
  {
    const static Flea3DynConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = Flea3DynConfigStatics::get_instance();
    
    return statics;
  }

//#line 14 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_rgb_640x480 = 4;
//#line 15 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_y8_640x480 = 5;
//#line 16 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_rgb_800x600 = 8;
//#line 17 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_y8_800x600 = 9;
//#line 18 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_rgb_1024x768 = 12;
//#line 19 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_y8_1024x768 = 13;
//#line 20 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_rgb_1280x960 = 16;
//#line 21 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_y8_1280x960 = 17;
//#line 22 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_rgb_1600x1200 = 20;
//#line 23 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_y8_1600x1200 = 21;
//#line 24 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_format7 = 23;
//#line 43 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_unspecified = 0;
//#line 44 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_mono8 = 31;
//#line 45 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_rgb8 = 27;
//#line 46 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_mono16 = 26;
//#line 47 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_raw8 = 22;
//#line 48 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_raw16 = 21;
//#line 59 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_ts_off = -1;
//#line 60 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_ts_gpio_0 = 0;
//#line 61 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_ts_gpio_2 = 2;
//#line 62 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_ts_gpio_3 = 3;
//#line 63 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_ts_sw = 7;
//#line 68 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_ts_low = 0;
//#line 69 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_ts_high = 1;
//#line 76 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_sc_off = -1;
//#line 77 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_sc_gpio_1 = 1;
//#line 78 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_sc_gpio_2 = 2;
//#line 79 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_sc_gpio_3 = 3;
//#line 84 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_sc_low = 0;
//#line 85 "/home/abdulla/dev/Active-stereo-Vision-Platform/ros/src/flea3/cfg/Flea3Dyn.cfg"
      const int Flea3Dyn_sc_high = 1;
}

#endif // __FLEA3DYNRECONFIGURATOR_H__
